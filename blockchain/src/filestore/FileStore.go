// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package filestore

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FilestoreABI is the input ABI used to generate the binding from.
const FilestoreABI = "[{\"constant\":false,\"inputs\":[],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllFiles\",\"outputs\":[{\"internalType\":\"contractFile[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// FilestoreBin is the compiled bytecode used for deploying new contracts.
var FilestoreBin = ""

// DeployFilestore deploys a new Ethereum contract, binding an instance of Filestore to it.
func DeployFilestore(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Filestore, error) {
	parsed, err := abi.JSON(strings.NewReader(FilestoreABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FilestoreBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Filestore{FilestoreCaller: FilestoreCaller{contract: contract}, FilestoreTransactor: FilestoreTransactor{contract: contract}, FilestoreFilterer: FilestoreFilterer{contract: contract}}, nil
}

// Filestore is an auto generated Go binding around an Ethereum contract.
type Filestore struct {
	FilestoreCaller     // Read-only binding to the contract
	FilestoreTransactor // Write-only binding to the contract
	FilestoreFilterer   // Log filterer for contract events
}

// FilestoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type FilestoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FilestoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FilestoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FilestoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FilestoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FilestoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FilestoreSession struct {
	Contract     *Filestore        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FilestoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FilestoreCallerSession struct {
	Contract *FilestoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// FilestoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FilestoreTransactorSession struct {
	Contract     *FilestoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// FilestoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type FilestoreRaw struct {
	Contract *Filestore // Generic contract binding to access the raw methods on
}

// FilestoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FilestoreCallerRaw struct {
	Contract *FilestoreCaller // Generic read-only contract binding to access the raw methods on
}

// FilestoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FilestoreTransactorRaw struct {
	Contract *FilestoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFilestore creates a new instance of Filestore, bound to a specific deployed contract.
func NewFilestore(address common.Address, backend bind.ContractBackend) (*Filestore, error) {
	contract, err := bindFilestore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Filestore{FilestoreCaller: FilestoreCaller{contract: contract}, FilestoreTransactor: FilestoreTransactor{contract: contract}, FilestoreFilterer: FilestoreFilterer{contract: contract}}, nil
}

// NewFilestoreCaller creates a new read-only instance of Filestore, bound to a specific deployed contract.
func NewFilestoreCaller(address common.Address, caller bind.ContractCaller) (*FilestoreCaller, error) {
	contract, err := bindFilestore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FilestoreCaller{contract: contract}, nil
}

// NewFilestoreTransactor creates a new write-only instance of Filestore, bound to a specific deployed contract.
func NewFilestoreTransactor(address common.Address, transactor bind.ContractTransactor) (*FilestoreTransactor, error) {
	contract, err := bindFilestore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FilestoreTransactor{contract: contract}, nil
}

// NewFilestoreFilterer creates a new log filterer instance of Filestore, bound to a specific deployed contract.
func NewFilestoreFilterer(address common.Address, filterer bind.ContractFilterer) (*FilestoreFilterer, error) {
	contract, err := bindFilestore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FilestoreFilterer{contract: contract}, nil
}

// bindFilestore binds a generic wrapper to an already deployed contract.
func bindFilestore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FilestoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Filestore *FilestoreRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Filestore.Contract.FilestoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Filestore *FilestoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Filestore.Contract.FilestoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Filestore *FilestoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Filestore.Contract.FilestoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Filestore *FilestoreCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Filestore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Filestore *FilestoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Filestore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Filestore *FilestoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Filestore.Contract.contract.Transact(opts, method, params...)
}

// GetAllFiles is a free data retrieval call binding the contract method 0xff24b5d5.
//
// Solidity: function getAllFiles() constant returns(address[])
func (_Filestore *FilestoreCaller) GetAllFiles(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Filestore.contract.Call(opts, out, "getAllFiles")
	return *ret0, err
}

// GetAllFiles is a free data retrieval call binding the contract method 0xff24b5d5.
//
// Solidity: function getAllFiles() constant returns(address[])
func (_Filestore *FilestoreSession) GetAllFiles() ([]common.Address, error) {
	return _Filestore.Contract.GetAllFiles(&_Filestore.CallOpts)
}

// GetAllFiles is a free data retrieval call binding the contract method 0xff24b5d5.
//
// Solidity: function getAllFiles() constant returns(address[])
func (_Filestore *FilestoreCallerSession) GetAllFiles() ([]common.Address, error) {
	return _Filestore.Contract.GetAllFiles(&_Filestore.CallOpts)
}

// AddFile is a paid mutator transaction binding the contract method 0x14447cb3.
//
// Solidity: function addFile() returns()
func (_Filestore *FilestoreTransactor) AddFile(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Filestore.contract.Transact(opts, "addFile")
}

// AddFile is a paid mutator transaction binding the contract method 0x14447cb3.
//
// Solidity: function addFile() returns()
func (_Filestore *FilestoreSession) AddFile() (*types.Transaction, error) {
	return _Filestore.Contract.AddFile(&_Filestore.TransactOpts)
}

// AddFile is a paid mutator transaction binding the contract method 0x14447cb3.
//
// Solidity: function addFile() returns()
func (_Filestore *FilestoreTransactorSession) AddFile() (*types.Transaction, error) {
	return _Filestore.Contract.AddFile(&_Filestore.TransactOpts)
}
